using System.Linq;
using Engine.Components;
using Engine.Events;
using Engine.Systems;
using Engine.Systems.Activation;
using Engine.Systems.Activation.Components;
using PlayGen.ITAlert.Simulation.Components;
using PlayGen.ITAlert.Simulation.Components.Common;
using PlayGen.ITAlert.Simulation.Components.EntityTypes;
using PlayGen.ITAlert.Simulation.Components.Items;
using PlayGen.ITAlert.Simulation.Components.Movement;
using PlayGen.ITAlert.Simulation.Components.Player;
using PlayGen.ITAlert.Simulation.Modules.Malware.Components;
using PlayGen.ITAlert.Simulation.Modules.Malware.Events;

namespace PlayGen.ITAlert.Simulation.Modules.Malware.Systems.Activation
{
	public class ScannerSystem : ITickableSystem
	{
		private readonly ComponentMatcherGroup<Engine.Systems.Activation.Components.Activation, Scanner, CurrentLocation, Owner> _scannerMatcherGroup;
		private readonly ComponentMatcherGroup<Subsystem, Visitors> _visitorsMatcherGroup;
		private readonly ComponentMatcherGroup<MalwareGenome, MalwareVisibility> _malwareMatcherGroup;
		private readonly ComponentMatcherGroup<Player, PlayerBitMask> _playerMatcherGroup;

		private const bool VisibleToAll = true;

		private readonly EventSystem _eventSystem;

		public ScannerSystem(IMatcherProvider matcherProvider,
			EventSystem eventSystem)
		{
			_scannerMatcherGroup = matcherProvider.CreateMatcherGroup<Engine.Systems.Activation.Components.Activation, Scanner, CurrentLocation, Owner>();
			_visitorsMatcherGroup = matcherProvider.CreateMatcherGroup<Subsystem, Visitors>();
			_malwareMatcherGroup = matcherProvider.CreateMatcherGroup<MalwareGenome, MalwareVisibility>();
			_playerMatcherGroup = matcherProvider.CreateMatcherGroup<Player, PlayerBitMask>();

			_eventSystem = eventSystem;
		}

		public void Tick(int currentTick)
		{
			foreach (var match in _scannerMatcherGroup.MatchingEntities)
			{
				var activation = match.Component1;
				switch (activation.ActivationState)
				{
					case ActivationState.Deactivating:
						OnDeactivating(match);
						break;
				}
			}
		}

		private void OnDeactivating(ComponentEntityTuple<Engine.Systems.Activation.Components.Activation, Scanner, CurrentLocation, Owner> entityTuple)
		{
			if (entityTuple.Component3.Value.HasValue
				&& _visitorsMatcherGroup.TryGetMatchingEntity(entityTuple.Component3.Value.Value, out var locationTuple)
				&& _playerMatcherGroup.TryGetMatchingEntity(entityTuple.Component4.Value.Value, out var playerTuple))
			{
				var @event = new ScannerActivationEvent()
				{
					PlayerEntityId = entityTuple.Component4.Value.Value,
					LocationEntityId = locationTuple.Entity.Id,
				};

				var malwareVisitors = locationTuple.Component2.Values
					.Join(_malwareMatcherGroup.MatchingEntities,
						k => k,
						k => k.Entity.Id,
						(o, i) => i)
						.ToArray();

				// join the current locations list of visitors with all malware entities
				foreach (var malwareVisitor in malwareVisitors)
				{
					// add the visible gene
					malwareVisitor.Component2.VisibleTo |= VisibleToAll
						? MalwareVisibility.All
						: playerTuple.Component2.Value;

					@event.ActivationResult = ScannerActivationEvent.ScannerActivationResult.VirusRevealed;
				}

				if (malwareVisitors.Length == 0)
				{
					@event.ActivationResult = ScannerActivationEvent.ScannerActivationResult.NoVirusPresent;
				}
				_eventSystem.Publish(@event);
			}
			entityTuple.Component4.Value = null;
		}

		public void Dispose()
		{
			_scannerMatcherGroup?.Dispose();
			_visitorsMatcherGroup?.Dispose();
			_malwareMatcherGroup?.Dispose();
			_playerMatcherGroup?.Dispose();
		}
	}
}
