using System.Linq;
using Engine.Components;
using Engine.Systems.Activation;
using Engine.Systems.Activation.Components;
using PlayGen.ITAlert.Simulation.Components;
using PlayGen.ITAlert.Simulation.Components.Common;
using PlayGen.ITAlert.Simulation.Components.EntityTypes;
using PlayGen.ITAlert.Simulation.Components.Items;
using PlayGen.ITAlert.Simulation.Components.Movement;
using PlayGen.ITAlert.Simulation.Modules.Malware.Components;

namespace PlayGen.ITAlert.Simulation.Modules.Malware.Systems
{
	public class ScannerBehaviour : IActivationExtension
	{
		private readonly ComponentMatcherGroup<Scanner, CurrentLocation, Owner> _scannerMatcherGroup;
		private readonly ComponentMatcherGroup<Subsystem, Visitors> _visitorsMatcherGroup;
		private readonly ComponentMatcherGroup<MalwareGenome, MalwareVisibility> _malwareMatcherGroup;
		private readonly ComponentMatcherGroup<Player, PlayerBitMask> _playerMatcherGroup;
		
		public ScannerBehaviour(IMatcherProvider matcherProvider)
		{
			_scannerMatcherGroup = matcherProvider.CreateMatcherGroup<Scanner, CurrentLocation, Owner>();
			_visitorsMatcherGroup = matcherProvider.CreateMatcherGroup<Subsystem, Visitors>();
			_malwareMatcherGroup = matcherProvider.CreateMatcherGroup<MalwareGenome, MalwareVisibility>();
			_playerMatcherGroup = matcherProvider.CreateMatcherGroup<Player, PlayerBitMask>();
		}

		public void OnNotActive(int itemId, Activation activation)
		{

		}

		public void OnActivating(int itemId, Activation activation)
		{

		}

		public void OnActive(int itemId, Activation activation)
		{
			// do nothing
		}

		public void OnDeactivating(int itemId, Activation activation)
		{
			if (_scannerMatcherGroup.TryGetMatchingEntity(itemId, out var itemTuple))
			{
				if (itemTuple.Component2.Value.HasValue
					&& _visitorsMatcherGroup.TryGetMatchingEntity(itemTuple.Component2.Value.Value, out var locationTuple)
					&& _playerMatcherGroup.TryGetMatchingEntity(itemTuple.Component3.Value.Value, out var playerTuple))
				{
					// join the current locations list of visitors with all malware entities
					foreach (var malwareVisitor in locationTuple.Component2.Values
						.Join(_malwareMatcherGroup.MatchingEntities,
							k => k,
							k => k.Entity.Id,
							(o, i) => i))
					{
						// add the visible gene
						malwareVisitor.Component2.VisibleTo |= playerTuple.Component2.Value;
					}
				}
				itemTuple.Component3.Value = null;
			}
		}
	}
}
