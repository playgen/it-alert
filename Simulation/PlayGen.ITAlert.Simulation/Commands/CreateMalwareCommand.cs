using System;
using System.Collections.Generic;
using System.Linq;
using Engine.Commands;
using Engine.Components;
using Engine.Entities;
using Engine.Systems.RNG;
using PlayGen.ITAlert.Simulation.Common;
using PlayGen.ITAlert.Simulation.Components.Common;
using PlayGen.ITAlert.Simulation.Components.EntityTypes;
using PlayGen.ITAlert.Simulation.Components.Movement;
using PlayGen.ITAlert.Simulation.Configuration;
using PlayGen.ITAlert.Simulation.Systems.Movement;

namespace PlayGen.ITAlert.Simulation.Commands
{
	public class CreateMalwareCommand : ICommand
	{
		public string Archetype { get; set; }

		public int NodeId { get; set; }

		//public IdentifierType IdentifierType { get; set; }

		public int? Genome { get; set; }

		public int? VisibleTo { get; set; }
	}

	public class CreateMalwareCommandHandler : CommandHandler<CreateMalwareCommand>
	{
		private readonly IEntityFactoryProvider _entityFactoryProvider;
		private readonly MovementSystem _movementSystem;
		private readonly RNGSystem _rngSystem;

		private readonly ComponentMatcherGroup<GraphNode, Visitors, IEntityType> _nodeMatcherGroup;

		public CreateMalwareCommandHandler(IEntityFactoryProvider entityFactoryProvider, 
			IMatcherProvider matcherProvider,
			MovementSystem movementSystem,
			RNGSystem rngSystem)
		{
			_entityFactoryProvider = entityFactoryProvider;
			_movementSystem = movementSystem;
			_nodeMatcherGroup = matcherProvider.CreateMatcherGroup<GraphNode, Visitors, IEntityType>();
			_rngSystem = rngSystem;
		}

		protected override bool TryProcessCommand(CreateMalwareCommand command)
		{
			if (string.IsNullOrEmpty(command.Archetype) == false
				&& _nodeMatcherGroup.TryGetMatchingEntity(command.NodeId, out var nodeTuple))
			{
				if (_entityFactoryProvider.TryCreateEntityFromArchetype(command.Archetype, out var malware))
				{
					var initialPosition = 0;
					switch (nodeTuple.Component3)
					{
						case Subsystem s:
							initialPosition = _rngSystem.Next( SimulationConstants.SubsystemPositions);
							break;
						case Connection c:
							initialPosition = _rngSystem.Next(SimulationConstants.ConnectionPositions);
							break;
					}

					_movementSystem.AddVisitor(nodeTuple.Entity, malware, initialPosition);
					return true;
				}
				malware?.Dispose();
			}
			return false;

		}
	}
}
