using System;
using System.Collections.Generic;
using System.Linq;
using Engine.Components;
using Engine.Entities;
using Engine.Systems;
using Engine.Util;
using PlayGen.ITAlert.Simulation.Common;
using PlayGen.ITAlert.Simulation.Components.Common;
using PlayGen.ITAlert.Simulation.Components.Malware;
using Zenject;

namespace PlayGen.ITAlert.Simulation.Systems.Malware
{
	public class MalwareEffects : ISystem, ITickableSystem
	{
		private readonly List<IMalwareEffect> _malwareEffects;

		private readonly ComponentMatcherGroup<MalwareGenome, CurrentLocation> _malwareHostMatcher;

		private readonly IEntityRegistry _entityRegistry;

		public MalwareEffects(MatcherProvider matcherProvider, 
			EntityRegistry entityRegistry, 
			// TODO: remove zenject dependency when implicit optional collection paramters is implemented
			[InjectOptional] List<IMalwareEffect> malwareEffectExtensions)
		{
			_malwareEffects = malwareEffectExtensions;

			// TODO: refactor to use tuple matcher
			_malwareHostMatcher = matcherProvider.CreateMatcherGroup<MalwareGenome, CurrentLocation>();

			_entityRegistry = entityRegistry;
		}

		public void Tick(int currentTick)
		{
			foreach (var malwareEffect in _malwareEffects)
			{

			}


		}

	}
}
