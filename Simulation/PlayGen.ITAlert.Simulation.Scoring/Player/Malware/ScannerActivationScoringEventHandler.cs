using System.Linq;
using Engine.Components;
using Engine.Events;
using PlayGen.ITAlert.Simulation.Components.Common;
using PlayGen.ITAlert.Simulation.Components.EntityTypes;
using PlayGen.ITAlert.Simulation.Modules.Antivirus.Components;
using PlayGen.ITAlert.Simulation.Modules.Malware.Components;
using PlayGen.ITAlert.Simulation.Modules.Malware.Events;

namespace PlayGen.ITAlert.Simulation.Scoring.Player.Malware
{
	public class ScannerActivationScoringEventHandler : PlayerScoringEventHandler<ScannerActivationEvent>
	{
		private readonly ComponentMatcherGroup<Subsystem, AntivirusEnhancement> _antivirusWorkstationMatcherGroup;

		public ScannerActivationScoringEventHandler(EventSystem eventSystem, IMatcherProvider matcherProvider) 
			: base(eventSystem, matcherProvider)
		{
			_antivirusWorkstationMatcherGroup = matcherProvider.CreateMatcherGroup<Subsystem, AntivirusEnhancement>();
		}

		protected override void HandleEvent(ScannerActivationEvent @event)
		{
			if (PlayerScoreMatcherGroup.TryGetMatchingEntity(@event.PlayerEntityId, out var playerTuple))
			{
				var useOnAntivirusWorkstation = _antivirusWorkstationMatcherGroup.MatchingEntityKeys.Contains(@event.SubsystemEntityId);

				switch (@event.ActivationResult)
				{
					case ScannerActivationEvent.ScannerActivationResult.VirusAlreadyVisisble:
						playerTuple.Component2.Systematicity -= 1;
						break;
					case ScannerActivationEvent.ScannerActivationResult.NoVirusPresent:
						break;
					case ScannerActivationEvent.ScannerActivationResult.VirusRevealed:
						playerTuple.Component2.Systematicity += 1 + (useOnAntivirusWorkstation ? 1 : 0);
						break;
				}
			}
		}
	}
}
