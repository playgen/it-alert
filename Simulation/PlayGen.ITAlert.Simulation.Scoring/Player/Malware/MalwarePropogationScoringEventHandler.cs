using Engine.Components;
using Engine.Events;
using PlayGen.ITAlert.Simulation.Modules.Malware.Events;

namespace PlayGen.ITAlert.Simulation.Scoring.Player.Malware
{
	public class MalwarePropogationScoringEventHandler : PlayerScoringEventHandler<MalwarePropogationEvent>
	{
		public MalwarePropogationScoringEventHandler(EventSystem eventSystem, IMatcherProvider matcherProvider) 
			: base(eventSystem, matcherProvider)
		{
		}

		protected override void HandleEvent(MalwarePropogationEvent @event)
		{
			var resourceManagementModifier = 0;
			var systematicityModifier = 0;

			switch (@event.Result)
			{
				case MalwarePropogationEvent.MalwarePropogationResult.Error:
					// TODO: log
					return;
				case MalwarePropogationEvent.MalwarePropogationResult.InfectionSpread:
					resourceManagementModifier = -1;
					systematicityModifier = -1;
					break;
				case MalwarePropogationEvent.MalwarePropogationResult.InfectionMutated:
					resourceManagementModifier = -1;
					systematicityModifier = -2;
					break;
				default:
					return;
			}

			foreach (var playerTuple in PlayerScoreMatcherGroup.MatchingEntities)
			{
				playerTuple.Component2.ResourceManagement += resourceManagementModifier;
				playerTuple.Component2.Systematicity += systematicityModifier;
				playerTuple.Component2.ActionCompleted(ActivationEventScoring.GetMultiplier(@event.Result));
			}
		}
	}
}
