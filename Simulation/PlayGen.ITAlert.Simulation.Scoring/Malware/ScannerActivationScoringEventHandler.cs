using System.Linq;
using Engine.Components;
using Engine.Events;
using PlayGen.ITAlert.Simulation.Components.Common;
using PlayGen.ITAlert.Simulation.Components.EntityTypes;
using PlayGen.ITAlert.Simulation.Modules.Antivirus.Components;
using PlayGen.ITAlert.Simulation.Modules.Malware.Components;
using PlayGen.ITAlert.Simulation.Modules.Malware.Events;

namespace PlayGen.ITAlert.Scoring.Malware
{
	public class ScannerActivationScoringEventHandler : PlayerScoringEventHandler<ScannerActivationEvent>
	{
		private readonly ComponentMatcherGroup<MalwareGenome, CurrentLocation> _malwareMatcherGroup;
	
		private readonly ComponentMatcherGroup<Subsystem, AntivirusEnhancement> _antivirusWorkstationMatcherGroup;


		public ScannerActivationScoringEventHandler(EventSystem eventSystem, IMatcherProvider matcherProvider) 
			: base(eventSystem, matcherProvider)
		{
			_malwareMatcherGroup = matcherProvider.CreateMatcherGroup<MalwareGenome, CurrentLocation>();
			_antivirusWorkstationMatcherGroup = matcherProvider.CreateMatcherGroup<Subsystem, AntivirusEnhancement>();
		}

		protected override void HandleEvent(ScannerActivationEvent @event)
		{
			var useOnAntivirusWorkstation = _antivirusWorkstationMatcherGroup.MatchingEntityKeys.Contains(@event.LocationEntityId);

			var systematicityModifier = useOnAntivirusWorkstation
				? 1
				: 0;
			
			switch (@event.ActivationResult)
			{
				case ScannerActivationEvent.ScannerActivationResult.NoVirusPresent:
				case ScannerActivationEvent.ScannerActivationResult.VirusAlreadyVisisble:
					systematicityModifier -= 1;
					break;
				case ScannerActivationEvent.ScannerActivationResult.VirusRevealed:
					systematicityModifier += 1;
					break;
			}

			if (PlayerScoreMatcherGroup.TryGetMatchingEntity(@event.PlayerEntityId,
				out var playerTuple))
			{
				playerTuple.Component2.Systematicity += systematicityModifier;
			}
		}

		public override void Dispose()
		{
			base.Dispose();
		}
	}
}
